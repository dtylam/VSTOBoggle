<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="InsertNew4.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>